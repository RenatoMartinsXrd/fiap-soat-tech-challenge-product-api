apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-app
  labels:
    app: {{ .Release.Name }}-app
spec:
  replicas: {{ .Values.app.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-app
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-app
    spec:
      imagePullSecrets:
          - name: ecr-secret

      initContainers:
        - name: init-db
          image: postgres:16-alpine
          env:
            - name: SPRING_DATASOURCE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-app-secret
                  key: SPRING_DATASOURCE_URL
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-app-secret
                  key: SPRING_DATASOURCE_USERNAME
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-app-secret
                  key: SPRING_DATASOURCE_PASSWORD
          command:
            - sh
            - -c
            - |
              DB_HOST=$(echo "$SPRING_DATASOURCE_URL" | sed -E 's|jdbc:postgresql://([^:/]+):[0-9]+/.*|\1|')
              DB_NAME=$(echo "$SPRING_DATASOURCE_URL" | sed -E 's|jdbc:postgresql://[^/]+/([^?]+).*|\1|')
              until PGPASSWORD=$SPRING_DATASOURCE_PASSWORD psql -h "$DB_HOST" -U "$SPRING_DATASOURCE_USERNAME" -d postgres -c "SELECT 1" >/dev/null; do
              echo "Esperando PostgreSQL ficar dispon√≠vel..."
              sleep 5
              done
              echo "Verificando se o banco $DB_NAME existe..."
              PGPASSWORD=$SPRING_DATASOURCE_PASSWORD psql -h "$DB_HOST" -U "$SPRING_DATASOURCE_USERNAME" -d postgres -tc "SELECT 1 FROM pg_database WHERE datname='$DB_NAME'" | grep -q 1 || \
              PGPASSWORD=$SPRING_DATASOURCE_PASSWORD psql -h "$DB_HOST" -U "$SPRING_DATASOURCE_USERNAME" -d postgres -c "CREATE DATABASE \"$DB_NAME\";"

      containers:
        - name: {{ .Release.Name }}-app
          image: "{{ .Values.app.image.repositoryPrefix }}/{{ .Release.Name }}:{{ .Values.app.image.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_DATASOURCE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-app-secret
                  key: SPRING_DATASOURCE_URL

            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-app-secret
                  key: SPRING_DATASOURCE_USERNAME

            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-app-secret
                  key: SPRING_DATASOURCE_PASSWORD

            - name: ACCESS_TOKEN_MERCADO_PAGO
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-app-secret
                  key: ACCESS_TOKEN_MERCADO_PAGO

            - name: NOTIFICATION_URL_NGROK
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-app-secret
                  key: NOTIFICATION_URL_NGROK

          resources:
            requests:
              cpu: "{{ .Values.app.resources.requests.cpu }}"
              memory: "{{ .Values.app.resources.requests.memory }}"
            limits:
              cpu: "{{ .Values.app.resources.limits.cpu }}"
              memory: "{{ .Values.app.resources.limits.memory }}"

#          livenessProbe:
#            httpGet:
#              path: /actuator/health
#              port: 8080
#            initialDelaySeconds: 10
#            periodSeconds: 5
#
#          readinessProbe:
#            httpGet:
#              path: /actuator/health
#              port: 8080
#            initialDelaySeconds: 5
#            periodSeconds: 5
